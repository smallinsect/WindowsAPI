https://www.bilibili.com/video/av65678855/

Demo01
	fun01
		GetSystemDirectory 获取系统文件目录
		CreateFile 创建文件
		WriteFile 写文件
	fun02
		setlocale(LC_ALL, "");//配置地域信息
		MultiByteToWideChar 多字节转宽字符
		WideCharToMultiByte 宽字符转多字节
	fun03
		遍历卷
		GetLogicalDriveStrings 获取所有盘符
		FindFirstVolume 获取设备名称
		FindNextVolume
		FindVolumeClose
	fun04
		驱动器属性
		GetDriveType
		GetVolumeInformation
	fun05
		磁盘容量
		GetDiskFreeSpace
		GetDiskFreeSpaceEx
	fun06
		文件操作
		DeleteFile 删除文件
		CopyFile 复制文件
		MoveFile 移动文件
	fun07
		文件复制
		fopen
		CreateFile ReadFile WriteFile
		CopyFile
	fun08
		遍历目录
		WIN32_FIND_DATA 文件基本信息
		FindFirstFile 查找文件
		FindNextFile 查找下一个文件
	fun09
		文件属性和时间
		GetFileAttributes 获取文件属性
		SetFileAttributes 设置文件属性
		GetFileAttributesEx 获取文件所有属性
		FileTimeToLocalFileTime 文件时间转当地时间
		FileTimeToSystemTime 文件时间转系统时间
		WIN32_FILE_ATTRIBUTE_DATA 文件的所有属性
		SYSTEMTIME 系统时间，包涵年月日时分秒
	fun10
		系统信息
		系统版本
			GetVersionEx
			OSVERSIONINFOEX
		硬件信息
			GetSystemInfo
			SYSTEM_INFO
	fun11
		系统信息
		计算机名 用户名 系统目录 windows目录 外设备
	fun12
		时间信息
			GetLocalTime 获取当前时间
			SetLocalTime 设置时间
			GetTickCount 获取开机到现在，过了多长时间
	fun13
		枚举字体
			枚举函数 EnumFonts,EnumFontFamillies,EnumFontFamilliesEx
			回调函数 BOOL CALLBACK EnumFamCallBack()
	fun14
		环境变量 进程修改的环境变量，自己能看到，系统环境变量和用户环境变量，不会改变。
			GetEnironmentStrings
			GetEnironmentVariable
			SetEnironmentVariable
		子进程继承父进程的环境变量
			进程中创建子进程，进程中修改的环境变量，子进程可以访问。
			可以用环境变量方式，是父进程和子进程通信
	fun15
		工具帮助函数 Tool Help
		#include <TlHelp32.h>
		枚举系统中正在运行的进程
		通过系统快照进行枚举
			CreateToolHelp32Snapshot(TH32CS_SNAPPROCESS, 0)
			Process32First()
			Process32Next()
	fun16
		#include <Psapi.h>
		通过psapi.dll中的函数进行枚举
			EnumProcess();
			EnumProcessModules();
			GetModuleFileNameEx();
	fun17
		#include <WtsApi32.h>
		#pragma comment(lib, "WtsApi32.lib")
		Windows Terminate Service终端服务
		通过wtsapi32.dll中的函数进行枚举
			WTSOpenServer();
			WTSEnumerateProcess();
			WTSCloseServer();
				//终端服务进程信息
		PWTS_PROCESS_INFO pProcessInfo;
		//进程个数
		DWORD dwCount;
		//if (!WTSEnumerateProcesses(hWtsServer, 0, 1, &pProcessInfo, &dwCount)) {
		if (!WTSEnumerateProcesses(WTS_CURRENT_SERVER_HANDLE, 0, 1, &pProcessInfo, &dwCount)) {
			printf("WTSEnumerateProcesses 失败\n");
			return;
		}
		//枚举所有进程的信息
		for (DWORD i = 0; i < dwCount; ++i) {
			printf("PID:%d\t名称:%s\n", pProcessInfo[i].ProcessId, pProcessInfo[i].pProcessName);
		}
		//内存泄漏就是从这里来的，好多人要忘记这里
		WTSFreeMemory(pProcessInfo);
	fun18 /?????????????????????????????
		通过ntdll.dll中的函数进行枚举
		ZwQuerySystemInformation
		
		
	fun19
	fun20
	fun21
	fun22
	fun23
	fun24
	fun25
	fun26
	fun27
	fun28
	fun29



DemoWin01
	显示一个简单窗口
DemoWin02
	对话框资源创建窗口
DemoWin03
	按钮类控件
	BM_SETCHECK BM_GETCHECK
	SetWindowText GetWindowText
	IsWindowVisible ShowWindow 
	IsWindowEnabled EnableWindow
DemoWin04
	编辑类控件
	SetWindowText GetWindowText GetWindowTextLength
	SendMessage(hwndEdit, WM_CUT, ...)
	SendMessage(hwndEdit, WM_COPY, ...)
	SendMessage(hwndEdit, WM_CLEAR, ...)
	SendMessage(hwndEdit, WM_PASTE, ...)
	SendMessage(hwndEdit, WM_GETSEL, ...)
	SendMessage(hwndEdit, WM_SETSEL, ...)
DemoWin05
	单选按钮控件
	发送消息 SendMessage SendDlgItemMessage
	单选按钮分组 GroupBox Tab停靠和选项组
	对话框上绘图
DemoWin06
	列表控件
	添加字符串
	删除字符串
	排序
	重置
	项目的选择和提取
	处理列表框的消息
DemoWin07
	文本输出函数
		TextOut
		SetTextAlign TA_LEFT,TA_RIGHT,TA_CENTER,TA_TOP,TA_BOTTOM,TA_BASELINE,TA_UPDATECP
DemoWin08
	制表符
		TabbedTextOut 可以输出\t制表符
DemoWin09 /???????????????????????
	三个拓展功能 字间距离、背景颜色、剪裁框
		ExtTextOut
DemoWin10 /???????????????????????
		DrawText
DemoWin11 /???????????????????????
		DrawTextExt
DemoWin12 /???????????????????????
	文本的设备环境属性
		SetTextColor 设置字体颜色
		SetBkColor 设置背景颜色
		SetBkMode 背景模式设为透明
		修改窗口背景颜色 创建画刷 修改背景框颜色
		SetTectCharacterExtra 设置背景颜色
DemoWin13
	CS_DBLCLKS 窗口添加双击样式
	选择字体
		CHOOSEFONT
		LOGFONT
		HFONT
		ChooseFont
		CreaterFontIndirect
DemoWin14
	字体
		库存字体
			GetStockObject(SYSTEM_FONT);
		创建字体
			LOGFONT 逻辑字节结构
			CreaterFont
			CreaterFontIndirect
DemoWin15 /???????????????????????
	划线
		MoveToEx
		LineTo
		Ployline,PolylineTo
		Arc,ArcTo,SetArcDirection
		PolyBeier,PolyBezierTo
DemoWin16 /???????????????????????
	绘图
		Rectangle
		RoundRect
		Ellipse
		Chord
		Pie 
		Polygon
		PolyPolygon
DemoWin17 /???????????????????????
	多边形填充模式
		Polygon
		SetPolyFillMode
		ALTERNATE
		WINDING
DemoWin18 /???????????????????????
	矩形
	RECT 
	FillRect,FrameRect,InvertRect
	SetRect 
	OffsetRect,InflateRect
	SetRectEmpty,IsRectEmpty
	IntersectRect,UnionRect
	PtInRect
DemoWin19 /???????????????????????
	显示位图
	加载位图资源
		hBitmap = LoadBitmap(...);
	获取位图信息
		Getobject(hBitmap, sizeof(BITMAP), &bitmap);
	创建内存设备环境
		hdcMem = CreateCompatibleDC(hdc);
	把GDI位图对象选入内存设备环境
		SelectObject(hdcMem, hBitmap);
	使用BitBlt显示位图
		BitBlt(hdc,..,hdcMem,...);
DemoWin20
多线程
	#include <process.h>
	创建线程
		CreateThread()
		_beginthread()
	线程函数
		void _cdecl ThreadProc(void *pParam)


DemoMFC01
	使用MFC创建对话窗口
	给窗口添加按钮，按钮添加点击事件。
	给窗口添加鼠标左键按下消息处理。
DemoMFC02
	文件操作
	C
	C++
	Windows API
	Windows MFC
DemoMFC03
	CreateDirectory 创建目录
	GetCurrentDirectory 获取当前程序目录
	SetCurrentDirectory 设置当前程序目录
	GetModuleFileName 获取模块路径
DemoMFC04
	内存映射文件
	1.创建文件对象 CreateFile
	2.创建文件映射对象 CreateFileMapping
	3.将文件的数据映射到进程的地址空间 MapViewOfFile
	4.从进程的地址空间撤销对文件数据的映射 UnmapViewOfFile
	5.关闭文件映射对象 CloseHandle
	6.关闭文件对象 CloseHandle
DemoMFC05
	注册表
		RegCreateKey	RegCreateKeyEx
		RegOpenKey		RegOpenKeyEx	
		RegQueryValue	RegQueryValueEx
		RegDeleteValue	RegDeleteValueEx
		RegCloseKey		
DemoMFC06
	一个最简单的GDI程序
	DC GetDC ReleaseDC CreatePen CreateSolidBrush RGB SelectObject LineTo Rectangle
DemoMFC07
	创建线程函数
		AfxBeginThread()
	线程函数
		typedef UINT (AFX_CDECL *AFX_THREADPROC)(LPVOID);
DemoMFC08
	线程控制
		暂停 pthread->SuspendThread()
		继续 pthread->ResumeThread()
		终止 bRunning = FALSE
DemoMFC09
	线程的同步 线程同步方法
		临界区 CCriticalSection *g_pCS;
			g_pCS->Lock();//加锁
			g_pCS->Unlock();//解锁
		互斥量 CMutex *g_pMutex;
			CSingleLock singleLock(g_pMutex); 
			singleLock.Lock();//加锁
			if(singleLock.IsLocked()){//如果锁住 就执行
				...
				//解锁
				singleLock.Unlock();
			}
		信号量 CSemaphore* g_pSemaphore = new CSemaphore(1, 1);
			CSingleLock singleLock(g_pSemaphore); 
			singleLock.Lock();//加锁
			if(singleLock.IsLocked()){//如果锁住 就执行
				...
				//解锁
				singleLock.Unlock();
			}
		事件 CEvent* pEvent = new CEvent(TRUE);
			CSingleLock singleLock(pEvent); 
			singleLock.Lock();//加锁
			if(singleLock.IsLocked()){//如果锁住 就执行
				...
				//解锁
				singleLock.Unlock();
				g_pEvent->SetEvent();//发信号给其他线程
			}
DemoMFC10
	创建进程
		CreateProcess 创建进程
		ExitProcess 自己退出
		TerminateProcess 自己终止别的进程
		STARTUPINFO 进程启动信息
		PROCESS_INFORMATION 进程信息
		GetCommandLine() 获取进程接受的命令行参数
		GetCurrentProcessId 当前进程ID
DemoMFC11
	传递最简单的数据 整形
	发送消息
	系统消息和用户信息（自定义消息）
		0x000~0x3FF
		0x400
	自定义消息的两种方法
		WM_USER
		RegisterWindowsMessage()
DemoMFC12
	接受消息



DemoDll01
	编写一个动态库文件
	DemoDll01.dll动态链接库文件
	DemoDll01.lib导入库文件
#ifdef __cplusplus //如果是C++
#define EXPORT extern "C" __declspec(dllexport)
#else//是C
#define EXPORT __declspec(dllexport)
#endif

	入口点和出口点
	DllMain()
	两种方式使用DLL
	启动时加载DLL:使用h文件和lib文件
	运行时加载DLL：使用LoadLibrary(),GetProcessAddress()

DemoService01
	编写服务程序
	服务主函数
		ServiceMain()
		StartServiceCtrlDispatcher()
	服务控制处理函数
		ServiceCtrlHandler()
		RegisterServiceCtrlHandler()
	Windows工具
		sc.exe
		binPath= 添加完整的路径（绝对路径）否则 系统找不到指定文件
		创建服务 sc create 服务名 binPath= e:\DemoService01.exe
		启动服务 sc start 服务名
		查询服务 sc query 服务名
		删除服务 sc delete 服务名
		停止服务 sc stop 服务名
		配置服务：
		sc config 服务名 start= demand //手动
		sc condig 服务名 start= auto //自动
		sc config 服务名 start= disabled //禁用
DemoService02
	编写服务安装和删除程序
		OpenSCManager()
		CreateService()
		DeleteService()
	Windows工具
		sc.exe


